<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EAS HOBBIES</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="icon" type="image/png" href="https://i.ibb.co/wFY6Tn2y/7-F.png">
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/animejs/lib/anime.iife.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&display=swap');
        
        * {
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(45deg, #5a67d8, #6a3b9a, #e55a5a, #e6b84d, #3ab0e0, #1abfb6, #5522b0, #e58fd9);
            overflow-x: hidden;
            animation: gradientShift 30s ease infinite;
            background-size: 400% 400%;
            transition: all 0.5s ease;
        }
        
        /* GTA MODE */
        body.gta-mode {
            background: linear-gradient(135deg, #0a2e36, #1a535c, #4ecdc4, #1a535c) !important;
            animation: gtaGradient 20s ease infinite !important;
            background-size: 400% 400%;
            color: #f7fff7 !important;
            cursor: none !important;
            overflow-x: hidden;
        }
        
        @keyframes gtaGradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        /* GTA cursor */
        .gta-cursor {
            position: fixed;
            width: 32px;
            height: 32px;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="45" fill="none" stroke="%23ff6b35" stroke-width="8"/><circle cx="50" cy="50" r="15" fill="%23ff6b35"/><line x1="50" y1="10" x2="50" y2="30" stroke="%23ff6b35" stroke-width="5"/><line x1="50" y1="70" x2="50" y2="90" stroke="%23ff6b35" stroke-width="5"/><line x1="10" y1="50" x2="30" y2="50" stroke="%23ff6b35" stroke-width="5"/><line x1="70" y1="50" x2="90" y2="50" stroke="%23ff6b35" stroke-width="5"/></svg>');
            background-size: contain;
            background-repeat: no-repeat;
            pointer-events: none;
            z-index: 9999;
            transform-origin: center;
            transition: transform 0.1s ease;
        }
        
        .gta-cursor-trail {
            position: fixed;
            width: 6px;
            height: 6px;
            background: #ff6b35;
            border-radius: 50%;
            pointer-events: none;
            z-index: 9998;
            box-shadow: 0 0 8px 2px #ff6b35;
        }
        
        .bullet-hole {
            position: fixed;
            width: 20px;
            height: 20px;
            background: #333;
            border-radius: 50%;
            pointer-events: none;
            z-index: 9997;
            box-shadow: 
                inset 0 0 5px rgba(0,0,0,0.8),
                0 0 10px rgba(255, 107, 53, 0.7);
            animation: bulletFade 3s ease-out forwards;
        }
        
        @keyframes bulletFade {
            0% { opacity: 1; transform: scale(1); }
            100% { opacity: 0; transform: scale(0.8); }
        }
        
        /* GTA text styling */
        body.gta-mode h1,
        body.gta-mode h2,
        body.gta-mode h3,
        body.gta-mode p,
        body.gta-mode a,
        body.gta-mode span {
            color: #f7fff7 !important;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7) !important;
        }
        
        /* GTA cards */
        body.gta-mode .name-card {
            background: linear-gradient(135deg, #1a535c, #4ecdc4) !important;
            border: 3px solid #ff6b35;
            box-shadow: 0 0 20px rgba(255, 107, 53, 0.7) !important;
            position: relative;
            overflow: hidden;
        }
        
        body.gta-mode .name-card::before {
            content: '';
            position: absolute;
            top: -10px;
            left: -10px;
            right: -10px;
            bottom: -10px;
            background: linear-gradient(45deg, transparent 40%, rgba(255, 107, 53, 0.3) 50%, transparent 60%);
            transform: rotate(45deg);
            animation: gtaShine 3s linear infinite;
            z-index: 1;
        }
        
        @keyframes gtaShine {
            0% { transform: translateX(-100%) rotate(45deg); }
            100% { transform: translateX(100%) rotate(45deg); }
        }
        
        /* GTA header */
        body.gta-mode header {
            background: rgba(26, 83, 92, 0.8) !important;
            backdrop-filter: blur(10px);
            position: relative;
            overflow: hidden;
            border-bottom: 3px solid #ff6b35;
        }
        
        body.gta-mode header::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect x="10" y="10" width="80" height="80" fill="none" stroke="%23ff6b35" stroke-width="2"/><circle cx="50" cy="50" r="30" fill="none" stroke="%23ff6b35" stroke-width="1"/></svg>');
            background-size: 80px;
            opacity: 0.1;
            animation: floatGTA 20s linear infinite;
        }
        
        @keyframes floatGTA {
            0% { transform: translateY(0) rotate(0deg); }
            100% { transform: translateY(-100px) rotate(5deg); }
        }
        
        /* GTA floating elements */
        .gta-star {
            position: fixed;
            width: 15px;
            height: 15px;
            background: #ff6b35;
            clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
            pointer-events: none;
            z-index: 9996;
            animation: floatGTAStar 8s linear forwards;
        }
        
        .gta-money {
            position: fixed;
            width: 20px;
            height: 20px;
            background: #ffd700;
            border-radius: 50%;
            pointer-events: none;
            z-index: 9996;
            animation: floatMoney 10s linear forwards;
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.8);
        }
        
        .gta-money::before {
            content: '$';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #000;
            font-weight: bold;
            font-size: 12px;
        }
        
        .gta-weapon {
            position: fixed;
            width: 40px;
            height: 15px;
            background: #333;
            pointer-events: none;
            z-index: 9996;
            animation: floatWeapon 12s linear forwards;
            border-radius: 3px;
        }
        
        .gta-weapon::before {
            content: '';
            position: absolute;
            width: 25px;
            height: 8px;
            background: #555;
            top: 3px;
            left: -20px;
            border-radius: 2px;
        }
        
        @keyframes floatGTAStar {
            0% { transform: translateY(100vh) rotate(0deg); opacity: 1; }
            100% { transform: translateY(-100px) rotate(360deg); opacity: 0; }
        }
        
        @keyframes floatMoney {
            0% { transform: translateY(100vh) rotate(0deg) scale(1); opacity: 1; }
            50% { transform: translateY(50vh) rotate(180deg) scale(1.2); opacity: 0.8; }
            100% { transform: translateY(-100px) rotate(360deg) scale(1); opacity: 0; }
        }
        
        @keyframes floatWeapon {
            0% { transform: translateX(-100px) rotate(0deg); opacity: 1; }
            100% { transform: translateX(calc(100vw + 100px)) rotate(360deg); opacity: 0; }
        }
        
        /* GTA radar overlay */
        .gta-radar {
            position: fixed;
            bottom: 20px;
            left: 20px;
            width: 150px;
            height: 150px;
            background: rgba(10, 46, 54, 0.8);
            border: 3px solid #ff6b35;
            border-radius: 50%;
            z-index: 9995;
            opacity: 0;
            transform: scale(0);
            transition: all 0.5s ease;
            overflow: hidden;
        }
        
        body.gta-mode .gta-radar {
            opacity: 1;
            transform: scale(1);
        }
        
        .gta-radar::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 80%;
            height: 80%;
            border: 1px solid rgba(255, 107, 53, 0.5);
            border-radius: 50%;
        }
        
        .gta-radar::after {
            content: '';
            position: absolute;
            top: 0;
            left: 50%;
            width: 2px;
            height: 100%;
            background: rgba(255, 107, 53, 0.5);
            transform: translateX(-50%);
        }
        
        .radar-sweep {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: conic-gradient(transparent, rgba(255, 107, 53, 0.3), transparent);
            animation: radarSweep 4s linear infinite;
            border-radius: 50%;
        }
        
        @keyframes radarSweep {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .radar-blip {
            position: absolute;
            width: 8px;
            height: 8px;
            background: #ff6b35;
            border-radius: 50%;
            animation: radarBlip 2s ease-in-out infinite;
        }
        
        @keyframes radarBlip {
            0%, 100% { opacity: 0.3; transform: scale(1); }
            50% { opacity: 1; transform: scale(1.5); }
        }
        
        /* GTA wanted level */
        .gta-wanted {
            position: fixed;
            top: 20px;
            right: 20px;
            width: 120px;
            height: 120px;
            background: rgba(10, 46, 54, 0.8);
            border: 3px solid #ff6b35;
            border-radius: 50%;
            z-index: 9995;
            opacity: 0;
            transform: scale(0);
            transition: all 0.5s ease;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: #ff6b35;
            font-weight: bold;
            text-transform: uppercase;
        }
        
        body.gta-mode .gta-wanted {
            opacity: 1;
            transform: scale(1);
        }
        
        .wanted-stars {
            display: flex;
            gap: 5px;
            margin-top: 10px;
        }
        
        .wanted-star {
            width: 15px;
            height: 15px;
            background: #ff6b35;
            clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
            opacity: 0.3;
        }
        
        .wanted-star.active {
            opacity: 1;
            animation: starPulse 1s ease-in-out infinite;
        }
        
        @keyframes starPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.2); }
        }
        
        /* GTA police siren */
        .gta-siren {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 9994;
            opacity: 0;
            background: 
                linear-gradient(90deg, rgba(255, 0, 0, 0.1) 0%, transparent 50%, rgba(0, 0, 255, 0.1) 100%);
            animation: sirenFlash 0.5s linear infinite;
        }
        
        body.gta-mode .gta-siren {
            opacity: 0;
        }
        
        body.gta-mode.wanted-5 .gta-siren {
            opacity: 0.7;
        }
        
        @keyframes sirenFlash {
            0%, 100% { opacity: 0.7; }
            50% { opacity: 0.3; }
        }
        
        /* GTA text effects */
        .gta-text {
            position: fixed;
            font-family: 'Arial Black', sans-serif;
            font-size: 3rem;
            font-weight: bold;
            color: #ff6b35;
            text-shadow: 0 0 10px rgba(255, 107, 53, 0.8);
            z-index: 9998;
            opacity: 0;
            pointer-events: none;
        }
        
        /* GTA explosion effect */
        .gta-explosion {
            position: fixed;
            width: 100px;
            height: 100px;
            background: radial-gradient(circle, #ff6b35 0%, #ff8e53 30%, transparent 70%);
            border-radius: 50%;
            pointer-events: none;
            z-index: 9999;
            opacity: 0;
            transform: scale(0);
        }
        
        /* GTA health and armor bars */
        .gta-hud {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 200px;
            background: rgba(10, 46, 54, 0.8);
            border: 2px solid #ff6b35;
            padding: 10px;
            z-index: 9995;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }
        
        body.gta-mode .gta-hud {
            opacity: 1;
            transform: translateY(0);
        }
        
        .hud-bar {
            height: 20px;
            background: #333;
            margin-bottom: 10px;
            position: relative;
            overflow: hidden;
        }
        
        .health-bar {
            height: 100%;
            background: linear-gradient(90deg, #ff0000, #ff6b35);
            width: 100%;
            transition: width 0.3s ease;
        }
        
        .armor-bar {
            height: 100%;
            background: linear-gradient(90deg, #4ecdc4, #1a535c);
            width: 100%;
            transition: width 0.3s ease;
        }
        
        .hud-label {
            color: #f7fff7;
            font-size: 12px;
            margin-bottom: 5px;
            text-transform: uppercase;
        }
        
        /* GTA radio static */
        .gta-radio {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                repeating-linear-gradient(0deg, transparent, transparent 2px, rgba(255, 255, 255, 0.05) 2px, rgba(255, 255, 255, 0.05) 4px),
                repeating-linear-gradient(90deg, transparent, transparent 2px, rgba(255, 255, 255, 0.05) 2px, rgba(255, 255, 255, 0.05) 4px);
            z-index: 9993;
            opacity: 0;
            pointer-events: none;
            animation: radioStatic 0.1s linear infinite;
        }
        
        body.gta-mode .gta-radio {
            opacity: 0.1;
        }
        
        @keyframes radioStatic {
            0% { background-position: 0 0; }
            100% { background-position: 10px 10px; }
        }
        
        /* Original styles preserved */
        /* BARBIE MODE */
        body.barbie-mode {
            background: linear-gradient(45deg, #FF69B4, #FFB6C1, #FF1493, #FFC0CB) !important;
            animation: barbieGradient 15s ease infinite !important;
            background-size: 400% 400%;
            color: #FF1493;
            cursor: none !important;
            overflow-x: hidden;
        }
        
        @keyframes barbieGradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        /* Barbie cursor */
        .barbie-cursor {
            position: fixed;
            width: 30px;
            height: 30px;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path d="M50,10 C70,10 85,25 85,45 C85,65 70,80 50,80 C30,80 15,65 15,45 C15,25 30,10 50,10 Z" fill="%23FF69B4"/><circle cx="40" cy="35" r="5" fill="white"/><circle cx="60" cy="35" r="5" fill="white"/><circle cx="40" cy="35" r="2" fill="black"/><circle cx="60" cy="35" r="2" fill="black"/><path d="M40,55 Q50,65 60,55" stroke="%23FF1493" stroke-width="3" fill="none"/></svg>');
            background-size: contain;
            background-repeat: no-repeat;
            pointer-events: none;
            z-index: 9999;
            transform-origin: center;
            transition: transform 0.1s ease;
        }
        
        .barbie-cursor-trail {
            position: fixed;
            width: 8px;
            height: 8px;
            background: rgba(255, 215, 0, 0.7);
            border-radius: 50%;
            pointer-events: none;
            z-index: 9998;
            box-shadow: 0 0 10px 2px rgba(255, 215, 0, 0.8);
        }
        
        .sparkle {
            position: fixed;
            width: 6px;
            height: 6px;
            background: white;
            border-radius: 50%;
            pointer-events: none;
            z-index: 9997;
            box-shadow: 0 0 10px 2px white;
            animation: sparkleFade 1s ease-out forwards;
        }
        
        @keyframes sparkleFade {
            0% { opacity: 1; transform: scale(1); }
            100% { opacity: 0; transform: scale(0); }
        }
        
        /* Barbie text styling */
        body.barbie-mode h1,
        body.barbie-mode h2,
        body.barbie-mode h3,
        body.barbie-mode p,
        body.barbie-mode a,
        body.barbie-mode span {
            color: #FF1493 !important;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.8) !important;
        }
        
        /* Barbie cards */
        body.barbie-mode .name-card {
            background: linear-gradient(135deg, #FF69B4, #DA70D6) !important;
            border: 3px solid white;
            box-shadow: 0 0 20px rgba(255, 105, 180, 0.7) !important;
            position: relative;
            overflow: hidden;
        }
        
        body.barbie-mode .name-card::before {
            content: '';
            position: absolute;
            top: -10px;
            left: -10px;
            right: -10px;
            bottom: -10px;
            background: linear-gradient(45deg, transparent 40%, rgba(255, 255, 255, 0.3) 50%, transparent 60%);
            transform: rotate(45deg);
            animation: diamondShine 3s linear infinite;
            z-index: 1;
        }
        
        @keyframes diamondShine {
            0% { transform: translateX(-100%) rotate(45deg); }
            100% { transform: translateX(100%) rotate(45deg); }
        }
        
        /* DARK MODE - Restored exactly as it was */
        body.dark-mode {
            background: #0f172a !important;
            animation: none !important;
            color: #e2e8f0;
        }
        
        body.dark-mode header {
            background: rgba(15, 23, 42, 0.8) !important;
        }
        
        body.dark-mode .name-card {
            background: linear-gradient(135deg, #1e293b, #334155) !important;
            color: #e2e8f0;
        }
        
        body.dark-mode footer {
            background: rgba(15, 23, 42, 0.9) !important;
        }
        
        body.dark-mode .button-container a {
            background: rgba(30, 41, 59, 0.7) !important;
            color: #e2e8f0;
        }
        
        body.dark-mode .button-container a:hover {
            background: rgba(30, 41, 59, 0.9) !important;
        }
        
        body.dark-mode .secret-code-input {
            background: rgba(30, 41, 59, 0.7) !important;
            color: #e2e8f0;
            border: 1px solid #475569;
        }
        
        /* GLITCH MODE - Digital Corruption */
        body.glitch-mode {
            background: #000 !important;
            animation: none !important;
            overflow: hidden;
        }
        
        body.glitch-mode::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)),
                repeating-linear-gradient(0deg, transparent, transparent 2px, rgba(0, 255, 255, 0.1) 2px, rgba(0, 255, 255, 0.1) 4px);
            animation: screenTear 0.1s infinite;
            z-index: 1000;
            pointer-events: none;
        }
        
        @keyframes screenTear {
            0% { transform: translateX(0); }
            20% { transform: translateX(-2px); }
            40% { transform: translateX(2px); }
            60% { transform: translateX(-1px); }
            80% { transform: translateX(1px); }
            100% { transform: translateX(0); }
        }
        
        .glitch-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 30% 50%, rgba(255, 0, 0, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 70% 80%, rgba(0, 255, 0, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 20%, rgba(0, 0, 255, 0.3) 0%, transparent 50%);
            mix-blend-mode: overlay;
            opacity: 0;
            z-index: 1001;
            pointer-events: none;
        }
        
        body.glitch-mode .glitch-overlay {
            opacity: 1;
            animation: glitchFlicker 0.5s infinite;
        }
        
        @keyframes glitchFlicker {
            0%, 100% { opacity: 0.7; }
            50% { opacity: 0.3; }
        }
        
        .error-message {
            position: fixed;
            background: #ff0000;
            color: white;
            padding: 10px 15px;
            border-radius: 5px;
            font-family: monospace;
            font-weight: bold;
            z-index: 1002;
            opacity: 0;
            transform: scale(0);
            box-shadow: 0 0 10px rgba(255, 0, 0, 0.7);
        }
        
        .blue-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #0078d7;
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1003;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            opacity: 0;
            pointer-events: none;
        }
        
        body.glitch-mode .blue-screen {
            animation: blueScreenFlash 5s infinite;
        }
        
        @keyframes blueScreenFlash {
            0%, 95% { opacity: 0; }
            96%, 98% { opacity: 1; }
            99%, 100% { opacity: 0; }
        }
        
        /* MATRIX MODE - Hacker Terminal */
        body.matrix-mode {
            background: #000 !important;
            animation: none !important;
            color: #00ff00 !important;
        }
        
        body.matrix-mode::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)),
                repeating-linear-gradient(0deg, transparent, transparent 2px, rgba(0, 255, 0, 0.1) 2px, rgba(0, 255, 0, 0.1) 4px);
            z-index: -1;
        }
        
        .matrix-rain {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to bottom, transparent 95%, rgba(0, 255, 0, 0.1) 100%);
            background-size: 100% 5px;
            animation: matrixRain 20s linear infinite;
            z-index: -1;
            pointer-events: none;
        }
        
        @keyframes matrixRain {
            0% { background-position: 0 0; }
            100% { background-position: 0 100%; }
        }
        
        .matrix-text {
            font-family: 'Courier New', monospace;
            color: #00ff00;
            text-shadow: 0 0 5px #00ff00;
        }
        
        .terminal-message {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid #00ff00;
            color: #00ff00;
            padding: 10px;
            font-family: monospace;
            z-index: 100;
            max-width: 300px;
            opacity: 0;
            transform: translateY(20px);
        }
        
        .access-granted {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 3rem;
            font-weight: bold;
            color: #00ff00;
            text-shadow: 0 0 10px #00ff00;
            z-index: 100;
            opacity: 0;
        }
        
        /* DISCO MODE - The Ultimate Party Experience */
        body.disco-mode {
            background: #000 !important;
            animation: none !important;
        }
        
        body.disco-mode::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 30%, rgba(255, 0, 0, 0.7) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(0, 255, 0, 0.7) 0%, transparent 50%),
                radial-gradient(circle at 40% 80%, rgba(0, 0, 255, 0.7) 0%, transparent 50%),
                radial-gradient(circle at 70% 70%, rgba(255, 255, 0, 0.7) 0%, transparent 50%);
            animation: discoLights 0.5s linear infinite;
            z-index: -1;
        }
        
        @keyframes discoLights {
            0% { 
                filter: hue-rotate(0deg) brightness(1);
                transform: scale(1);
            }
            25% { 
                filter: hue-rotate(90deg) brightness(1.2);
                transform: scale(1.05);
            }
            50% { 
                filter: hue-rotate(180deg) brightness(1.5);
                transform: scale(1.1);
            }
            75% { 
                filter: hue-rotate(270deg) brightness(1.2);
                transform: scale(1.05);
            }
            100% { 
                filter: hue-rotate(360deg) brightness(1);
                transform: scale(1);
            }
        }
        
        /* Disco animations for all elements */
        body.disco-mode .name-card {
            animation: discoCard 0.8s ease infinite alternate, colorShift 2s linear infinite !important;
            transform-origin: center;
            background: rgba(255, 255, 255, 0.1) !important;
            backdrop-filter: blur(5px);
            border: 2px solid rgba(255, 255, 255, 0.3);
        }
        
        @keyframes discoCard {
            0% { transform: translateY(0) rotate(0deg) scale(1); }
            25% { transform: translateY(-10px) rotate(2deg) scale(1.02); }
            50% { transform: translateY(-5px) rotate(-1deg) scale(1.05); }
            75% { transform: translateY(-15px) rotate(1deg) scale(1.03); }
            100% { transform: translateY(-8px) rotate(-2deg) scale(1.06); }
        }
        
        @keyframes colorShift {
            0% { border-color: rgba(255, 0, 0, 0.5); box-shadow: 0 0 20px rgba(255, 0, 0, 0.5); }
            25% { border-color: rgba(0, 255, 0, 0.5); box-shadow: 0 0 20px rgba(0, 255, 0, 0.5); }
            50% { border-color: rgba(0, 0, 255, 0.5); box-shadow: 0 0 20px rgba(0, 0, 255, 0.5); }
            75% { border-color: rgba(255, 255, 0, 0.5); box-shadow: 0 0 20px rgba(255, 255, 0, 0.5); }
            100% { border-color: rgba(255, 0, 255, 0.5); box-shadow: 0 0 20px rgba(255, 0, 255, 0.5); }
        }
        
        body.disco-mode .name-title {
            animation: bounceText 0.6s ease infinite alternate, textGlow 1s ease infinite !important;
            color: white !important;
        }
        
        @keyframes bounceText {
            0% { transform: translateY(0) scale(1); }
            100% { transform: translateY(-10px) scale(1.1); }
        }
        
        @keyframes textGlow {
            0%, 100% { 
                text-shadow: 0 0 10px #ff0000, 0 0 20px #ff0000, 0 0 30px #ff0000;
            }
            25% { 
                text-shadow: 0 0 10px #00ff00, 0 0 20px #00ff00, 0 0 30px #00ff00;
            }
            50% { 
                text-shadow: 0 0 10px #0000ff, 0 0 20px #0000ff, 0 0 30px #0000ff;
            }
            75% { 
                text-shadow: 0 0 10px #ffff00, 0 0 20px #ffff00, 0 0 30px #ffff00;
            }
        }
        
        body.disco-mode header {
            animation: headerPulse 0.8s ease infinite alternate !important;
            background: rgba(255, 255, 255, 0.1) !important;
        }
        
        @keyframes headerPulse {
            0% { transform: scale(1); }
            100% { transform: scale(1.02); }
        }
        
        body.disco-mode iframe {
            animation: iframeDisco 1s ease infinite alternate !important;
            border: 3px solid;
            border-image: linear-gradient(45deg, red, yellow, green, blue, purple) 1;
        }
        
        @keyframes iframeDisco {
            0% { transform: rotate(-1deg) scale(1); }
            50% { transform: rotate(1deg) scale(1.02); }
            100% { transform: rotate(-1deg) scale(1); }
        }
        
        body.disco-mode .button-container a {
            animation: buttonBounce 0.7s ease infinite alternate, buttonColors 1.5s linear infinite !important;
        }
        
        @keyframes buttonBounce {
            0% { transform: translateY(0); }
            100% { transform: translateY(-8px); }
        }
        
        @keyframes buttonColors {
            0% { background: rgba(255, 0, 0, 0.3) !important; }
            20% { background: rgba(255, 165, 0, 0.3) !important; }
            40% { background: rgba(255, 255, 0, 0.3) !important; }
            60% { background: rgba(0, 255, 0, 0.3) !important; }
            80% { background: rgba(0, 0, 255, 0.3) !important; }
            100% { background: rgba(128, 0, 128, 0.3) !important; }
        }
        
        body.disco-mode footer {
            animation: footerShake 0.5s ease infinite alternate !important;
            background: rgba(255, 255, 255, 0.1) !important;
        }
        
        @keyframes footerShake {
            0% { transform: translateX(-5px); }
            100% { transform: translateX(5px); }
        }
        
        /* Disco ball with mirror effects */
        .disco-ball {
            position: fixed;
            top: 20px;
            left: 20px;
            width: 80px;
            height: 80px;
            background: radial-gradient(circle at 30% 30%, #fff, #aaa 20%, #333 70%);
            border-radius: 50%;
            box-shadow: 
                0 0 30px rgba(255, 255, 255, 0.8),
                inset -10px -10px 20px rgba(0, 0, 0, 0.6);
            z-index: 1000;
            opacity: 0;
            transform: scale(0);
            transition: opacity 0.5s ease, transform 0.5s ease;
            animation: discoBallSpin 3s linear infinite;
        }
        
        body.disco-mode .disco-ball {
            opacity: 1;
            transform: scale(1);
        }
        
        .disco-ball::before {
            content: '';
            position: absolute;
            top: 10%;
            left: 10%;
            width: 80%;
            height: 80%;
            background: 
                radial-gradient(circle at 20% 20%, rgba(255, 255, 255, 0.8) 2%, transparent 3%),
                radial-gradient(circle at 40% 40%, rgba(255, 255, 255, 0.8) 2%, transparent 3%),
                radial-gradient(circle at 60% 60%, rgba(255, 255, 255, 0.8) 2%, transparent 3%),
                radial-gradient(circle at 80% 20%, rgba(255, 255, 255, 0.8) 2%, transparent 3%),
                radial-gradient(circle at 20% 80%, rgba(255, 255, 255, 0.8) 2%, transparent 3%);
            border-radius: 50%;
        }
        
        @keyframes discoBallSpin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Secret code input */
        .secret-code-input {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1001;
            width: 220px;
            padding: 10px 15px;
            border: none;
            border-radius: 25px;
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            color: white;
            font-size: 16px;
            text-align: center;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            font-weight: bold;
        }
        
        .secret-code-input:focus {
            outline: none;
            background: rgba(255, 255, 255, 0.3);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }
        
        .secret-code-input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }
        
        body.disco-mode .secret-code-input {
            animation: inputPulse 0.5s ease infinite alternate !important;
            background: rgba(0, 0, 0, 0.5);
            color: white;
            border: 2px solid white;
        }
        
        @keyframes inputPulse {
            0% { transform: translateX(-50%) scale(1); }
            100% { transform: translateX(-50%) scale(1.05); }
        }
        
        /* Floating disco lights */
        .disco-light {
            position: fixed;
            width: 100px;
            height: 100px;
            border-radius: 50%;
            filter: blur(30px);
            opacity: 0;
            z-index: -1;
            animation: floatLight 15s linear infinite;
        }
        
        body.disco-mode .disco-light {
            opacity: 0.7;
        }
        
        @keyframes floatLight {
            0% { transform: translate(0, 0) rotate(0deg); }
            25% { transform: translate(100px, 100px) rotate(90deg); }
            50% { transform: translate(200px, 0) rotate(180deg); }
            75% { transform: translate(100px, -100px) rotate(270deg); }
            100% { transform: translate(0, 0) rotate(360deg); }
        }
        
        /* Original styles preserved */
        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .max-w-3xl { max-width: 66rem; }
        
        .name-card {
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            transform-style: preserve-3d;
        }
        
        .name-card:hover {
            transform: translateY(-15px) rotateY(5deg);
            box-shadow: 0 25px 50px rgba(0,0,0,0.3);
        }
        
        .name-title { font-family: 'Playfair Display', serif; }
        
        header {
            background: rgba(0, 0, 0, 0.15);
            backdrop-filter: blur(5px);
        }
        
        .container {
            max-width: 1400px;
            width: 100%;
            margin: 0 auto;
            padding: 0 15px;
        }
        
        .floating { animation: floating 3s ease-in-out infinite; }
        
        .rounded-3xl { border-radius: 1.5rem; }
        
        @keyframes floating {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-25px); }
            100% { transform: translateY(0px); }
        }
        
        .shadow-2xl { box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25); }
        
        .p-10 { padding: 2.5rem; }
        .mb-5 { margin-bottom: 1.25rem; }
        .text-lg { font-size: 1.125rem; line-height: 1.75rem; }
        
        .gradient-text {
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4, #feca57, #ff9ff3, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            background-size: 400% 400%;
            animation: textGradientShift 8s ease infinite;
            font-weight: 800;
        }
        
        @keyframes textGradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .text-4xl { font-size: 2.5rem; line-height: 1.2; }
        
        /* Dark mode toggle styles */
        .dark-mode-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }
        
        .toggle-button {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }
        
        .toggle-button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }
        
        .toggle-button i {
            font-size: 20px;
            color: white;
        }
        
        /* Music toggle styles */
        .music-toggle {
            position: fixed;
            top: 20px;
            right: 80px;
            z-index: 1000;
        }
        
        .music-button {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }
        
        .music-button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }
        
        .music-button i {
            font-size: 20px;
            color: white;
        }
        
        /* Grid layout */
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
            width: 100%;
        }
        
        .name-card {
            display: flex;
            flex-direction: column;
            height: 100%;
            min-height: 250px;
        }
        
        /* Responsive adjustments */
        @media (max-width: 380px) {
            .name-title { font-size: 2rem; }
            header p { font-size: 1rem; }
            .name-card { padding: 1rem; }
            .p-5 { padding: 0.75rem; }
            .w-12, .h-12 { width: 2.5rem; height: 2.5rem; }
            iframe { height: 350px; }
            .dark-mode-toggle { top: 10px; right: 10px; }
            .music-toggle { top: 10px; right: 70px; }
            .toggle-button, .music-button { width: 40px; height: 40px; }
            .toggle-button i, .music-button i { font-size: 16px; }
            .grid { grid-template-columns: 1fr; gap: 1rem; }
            .secret-code-input { width: 150px; font-size: 12px; padding: 6px 10px; }
        }
    </style>
</head>
<body class="min-h-screen">
    <!-- Background elements -->
    <div id="stars-container" class="fixed inset-0 overflow-hidden pointer-events-none"></div>
    
    <!-- GTA Mode Elements -->
    <div class="gta-radar">
        <div class="radar-sweep"></div>
        <!-- Radar blips will be added by JavaScript -->
    </div>
    <div class="gta-wanted">
        <div>Wanted</div>
        <div class="wanted-stars">
            <div class="wanted-star"></div>
            <div class="wanted-star"></div>
            <div class="wanted-star"></div>
            <div class="wanted-star"></div>
            <div class="wanted-star"></div>
        </div>
    </div>
    <div class="gta-siren"></div>
    <div class="gta-hud">
        <div class="hud-label">Health</div>
        <div class="hud-bar">
            <div class="health-bar" id="healthBar"></div>
        </div>
        <div class="hud-label">Armor</div>
        <div class="hud-bar">
            <div class="armor-bar" id="armorBar"></div>
        </div>
    </div>
    <div class="gta-radio"></div>
    
    <!-- Barbie Mode Elements -->
    <div class="barbie-glitter"></div>
    <div class="barbie-dreamhouse"></div>
    <div class="barbie-runway"></div>
    
    <!-- Disco lights -->
    <div class="disco-light" style="top:10%; left:10%; background:red; animation-delay:0s;"></div>
    <div class="disco-light" style="top:20%; left:80%; background:blue; animation-delay:2s;"></div>
    <div class="disco-light" style="top:60%; left:20%; background:green; animation-delay:4s;"></div>
    <div class="disco-light" style="top:80%; left:70%; background:yellow; animation-delay:6s;"></div>
    <div class="disco-light" style="top:40%; left:50%; background:purple; animation-delay:8s;"></div>
    
    <!-- Disco ball -->
    <div class="disco-ball"></div>
    
    <!-- GLITCH MODE ELEMENTS -->
    <div class="glitch-overlay"></div>
    <div class="blue-screen">
        <h1>:(</h1>
        <p>Your PC ran into a problem and needs to restart. We're just collecting some error info, and then we'll restart for you.</p>
        <p>0% complete</p>
    </div>
    
    <!-- MATRIX MODE ELEMENTS -->
    <div class="matrix-rain"></div>
    <div class="terminal-message"></div>
    <div class="access-granted">ACCESS GRANTED</div>
    
    <!-- Secret code input -->
    <input type="text" class="secret-code-input" placeholder="Type 'disco', 'glitch', 'matrix', 'barbie' or 'gta'" id="secretCodeInput">
    
    <!-- Audio element for music -->
    <audio id="background-music" loop>
        <source src="https://files.catbox.moe/ayfuk1.wav" type="audio/mpeg">
        Your browser does not support the audio element.
    </audio>
    
    <!-- Barbie Audio -->
    <audio id="barbie-music" loop>
        <source src="https://files.catbox.moe/ayfuk1.wav" type="audio/mpeg">
        Your browser does not support the audio element.
    </audio>
    
    <!-- GTA Audio -->
    <audio id="gta-music" loop>
        <source src="https://files.catbox.moe/ayfuk1.wav" type="audio/mpeg">
        Your browser does not support the audio element.
    </audio>
    
    <!-- GTA Sounds -->
    <audio id="gunshot-sound">
        <source src="https://assets.mixkit.co/sfx/preview/mixkit-gun-shot-1663.mp3" type="audio/mpeg">
    </audio>
    
    <audio id="explosion-sound">
        <source src="https://assets.mixkit.co/sfx/preview/mixkit-explosion-1697.mp3" type="audio/mpeg">
    </audio>
    
    <audio id="siren-sound">
        <source src="https://assets.mixkit.co/sfx/preview/mixkit-police-siren-1693.mp3" type="audio/mpeg">
    </audio>
    
    <audio id="radio-sound">
        <source src="https://assets.mixkit.co/sfx/preview/mixkit-radio-static-1680.mp3" type="audio/mpeg">
    </audio>
    
    <!-- Barbie Sounds -->
    <audio id="giggle-sound">
        <source src="https://assets.mixkit.co/sfx/preview/mixkit-girl-giggling-583.mp3" type="audio/mpeg">
    </audio>
    
    <audio id="sparkle-sound">
        <source src="https://assets.mixkit.co/sfx/preview/mixkit-magic-sparkle-sound-309.mp3" type="audio/mpeg">
    </audio>
    
    <audio id="beautiful-sound">
        <source src="https://assets.mixkit.co/sfx/preview/mixkit-cute-girl-voice-says-hello-220.mp3" type="audio/mpeg">
    </audio>
    
    <!-- Dark Mode Toggle -->
    <div class="dark-mode-toggle">
        <div class="toggle-button" id="darkModeToggle">
            <i class="fas fa-moon"></i>
        </div>
    </div>

    <!-- Music Toggle -->
    <div class="music-toggle">
        <div class="music-button" id="musicToggle">
            <i class="fas fa-volume-mute"></i>
        </div>
    </div>

    <!-- Header -->
    <header class="relative py-8 md:py-20 text-center">
        <div class="container mx-auto px-4">
            <div class="flex justify-center mb-4 md:mb-6">
                <img src="https://i.ibb.co/wFY6Tn2y/7-F.png" alt="Logo" class="h-24 w-24 md:h-32 md:w-32 floating rounded-full">
            </div>
            <h1 class="name-title font-bold text-white mb-4 md:mb-6 floating text-5xl md:text-7xl">
                 EAS HOBBIES 
            </h1>
            <p class="text-lg md:text-2xl text-white/90 max-w-3xl mx-auto">
                At this website people can see your hobby and know you better
            </p>
        </div>
    </header>
    
    <div class="flex justify-center w-full px-4 mb-8 md:mb-10">
        <iframe 
      src="https://studio.pickaxe.co/_embed/H3NJRZ7I6R?d=deployment-26ee6cab-1a57-45e9-b082-fe2f93fdf70d" 
      style="width: 100%; max-width: 807px; box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25); border-radius: 24px;" 
      frameborder="0" allow="microphone">
        </iframe>
    </div>
    
     <!-- Names Grid -->
    <main class="container mx-auto px-4 pb-12 md:pb-20">
        <div class="grid">
            <!-- Name cards will be generated by JavaScript -->
        </div>
    </main>
    
    <!-- ManageBac Section -->
    <section class="container mx-auto px-4 mb-8 md:mb-10">
        <div class="button-container flex justify-center gap-4 md:gap-6 flex-wrap">
            <a href="https://eas.managebac.com/student/home" target="_blank" class="bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white font-bold py-3 px-6 md:py-4 md:px-8 rounded-full transition-all duration-300 inline-flex items-center gap-2">
                <i data-feather="external-link"></i>
                Your Managebac
            </a>
            <a href="school.html" class="bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white font-bold py-3 px-6 md:py-4 md:px-8 rounded-full transition-all duration-300 inline-flex items-center gap-2">
                <i data-feather="video"></i>
                Our School EAS
            </a>
            <a href="mac.html" class="bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white font-bold py-3 px-6 md:py-4 md:px-8 rounded-full transition-all duration-300 inline-flex items-center gap-2">
                <i data-feather="plus-circle"></i>
                Add to Dock
            </a>
            <a href="https://www.instagram.com/eashobies.site/?utm_source=ig_web_button_share_sheet" target="_blank" class="bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white font-bold py-3 px-6 md:py-4 md:px-8 rounded-full transition-all duration-300 inline-flex items-center gap-2">
                <i data-feather="instagram"></i>
                Our Instagram
            </a>
            <a href="https://admin.eashobies.site" class="bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white font-bold py-3 px-6 md:py-4 md:px-8 rounded-full transition-all duration-300 inline-flex items-center gap-2">
                <i data-feather="settings"></i>
                Admin Panel (for host only )
            </a>
            <a href="games.html" class="bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white font-bold py-3 px-6 md:py-4 md:px-8 rounded-full transition-all duration-300 inline-flex items-center gap-2">
                <i class="fa-solid fa-gamepad"></i>
                Fun Games
            </a>
            <a href="https://eashobies.site/info.html" class="bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white font-bold py-3 px-6 md:py-4 md:px-8 rounded-full transition-all duration-300 inline-flex items-center gap-2">
                <i class="fa-solid fa-circle-info"></i>
                Info
            </a>
            <!-- NEW BUTTONS ADDED HERE -->
            <a href="https://eashobies.site/flappybird.html" class="bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white font-bold py-3 px-6 md:py-4 md:px-8 rounded-full transition-all duration-300 inline-flex items-center gap-2">
                <i class="fa-solid fa-dove"></i>
                Flappy Bird Game
            </a>
            <a href="https://eashobies.site/circle.html" class="bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white font-bold py-3 px-6 md:py-4 md:px-8 rounded-full transition-all duration-300 inline-flex items-center gap-2">
                <i class="fa-solid fa-circle"></i>
                Perfect Circle Game
            </a>
            <a href="https://eashobies.site/sponsor.html" class="bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white font-bold py-3 px-6 md:py-4 md:px-8 rounded-full transition-all duration-300 inline-flex items-center gap-2">
                <i class="fa-solid fa-handshake"></i>
                Our Sponsors
            </a>
        </div>
    </section>
    
    <!-- Footer -->
    <footer class="bg-black/20 py-8 md:py-12 text-center text-white/80">
        <div class="container mx-auto px-4">
            <p class="text-base md:text-lg md:text-xl">Ⓡ-© 2025.  Something incorrect, lie or you want to add something, etc contact for change +994 50 549 9933 or find Yusif.G 7f Or Farhad.A 7f Made by YUSAI And Farhadik. Logo By Rufiz.A Kenan the 3rd host</p>
        </div>
    </footer>
    
    <script>
        // Initialize AOS
        AOS.init({
            duration: 1000,
            once: true,
            easing: 'ease-out-cubic',
            offset: 100
        });
        
        // Initialize Feather Icons
        feather.replace();
        
        // Ultimate Disco Mode Functionality
        const secretCodeInput = document.getElementById('secretCodeInput');
        const body = document.body;
        
        // GTA MODE VARIABLES
        let gtaCursor;
        let gtaTrails = [];
        let gtaInterval;
        let gtaStarInterval;
        let gtaMoneyInterval;
        let gtaWeaponInterval;
        let gtaTextInterval;
        let gtaWantedLevel = 0;
        let gtaHealth = 100;
        let gtaArmor = 100;
        let gtaRadarBlips = [];
        
        // BARBIE MODE VARIABLES
        let barbieCursor;
        let barbieTrails = [];
        let barbieInterval;
        let barbieHeartInterval;
        let barbieDiamondInterval;
        let barbieKissInterval;
        let barbieBrushInterval;
        let barbieTextInterval;
        let barbieVoiceInterval;
        
        // GLITCH MODE VARIABLES
        let glitchInterval;
        let errorMessages = [
            "ERROR: Memory corruption detected",
            "SYSTEM FAILURE: Kernel panic",
            "CRITICAL: Stack overflow",
            "WARNING: Buffer overflow",
            "FATAL: Segmentation fault",
            "ERROR: Invalid pointer exception",
            "SYSTEM: Access violation",
            "CRITICAL: Page fault in nonpaged area"
        ];
        
        // MATRIX MODE VARIABLES
        let matrixInterval;
        let terminalMessages = [
            "> Initializing system scan...",
            "> Bypassing firewall...",
            "> Accessing mainframe...",
            "> Decrypting security protocols...",
            "> Establishing secure connection...",
            "> Uploading payload...",
            "> Executing command sequence...",
            "> System compromised..."
        ];
        
        secretCodeInput.addEventListener('input', function() {
            const inputValue = this.value.toLowerCase().trim();
            
            // Reset all modes first
            body.classList.remove('disco-mode', 'glitch-mode', 'matrix-mode', 'barbie-mode', 'gta-mode');
            body.classList.remove('wanted-1', 'wanted-2', 'wanted-3', 'wanted-4', 'wanted-5');
            clearInterval(glitchInterval);
            clearInterval(matrixInterval);
            clearInterval(barbieInterval);
            clearInterval(barbieHeartInterval);
            clearInterval(barbieDiamondInterval);
            clearInterval(barbieKissInterval);
            clearInterval(barbieBrushInterval);
            clearInterval(barbieTextInterval);
            clearInterval(barbieVoiceInterval);
            clearInterval(gtaInterval);
            clearInterval(gtaStarInterval);
            clearInterval(gtaMoneyInterval);
            clearInterval(gtaWeaponInterval);
            clearInterval(gtaTextInterval);
            
            // Remove barbie cursor
            if (barbieCursor) {
                barbieCursor.remove();
                barbieCursor = null;
            }
            
            // Remove gta cursor
            if (gtaCursor) {
                gtaCursor.remove();
                gtaCursor = null;
            }
            
            // Remove barbie trails
            barbieTrails.forEach(trail => trail.remove());
            barbieTrails = [];
            
            // Remove gta trails
            gtaTrails.forEach(trail => trail.remove());
            gtaTrails = [];
            
            // Remove all disco animations
            document.querySelectorAll('p, h1, h2, h3').forEach(element => {
                element.style.animation = '';
            });
            
            document.querySelectorAll('.name-card').forEach(card => {
                card.style.animationDelay = '';
            });
            
            // Remove matrix styling
            document.querySelectorAll('h1, h2, h3, p, a, span').forEach(element => {
                element.classList.remove('matrix-text');
            });
            
            // DISCO MODE
            if (inputValue === 'disco') {
                body.classList.add('disco-mode');
                body.classList.remove('dark-mode');
                
                // Add disco music if available
                const backgroundMusic = document.getElementById('background-music');
                if (backgroundMusic) {
                    backgroundMusic.play().catch(e => console.log("Autoplay prevented:", e));
                }
                
                // Add more dynamic effects
                document.querySelectorAll('.name-card').forEach((card, index) => {
                    card.style.animationDelay = `${index * 0.1}s`;
                });
                
                // Add floating text effect
                document.querySelectorAll('p, h1, h2, h3').forEach(element => {
                    element.style.animation = `bounceText 0.6s ease infinite alternate, textGlow 1s ease infinite`;
                });
                
            } 
            // GLITCH MODE
            else if (inputValue === 'glitch') {
                body.classList.add('glitch-mode');
                
                // Create random error messages
                glitchInterval = setInterval(() => {
                    createErrorMessage();
                }, 1000);
                
                // Scramble text periodically
                setInterval(() => {
                    scrambleText();
                }, 500);
                
            } 
            // MATRIX MODE
            else if (inputValue === 'matrix') {
                body.classList.add('matrix-mode');
                
                // Apply matrix styling to text
                document.querySelectorAll('h1, h2, h3, p, a, span').forEach(element => {
                    element.classList.add('matrix-text');
                });
                
                // Terminal typing effect
                let messageIndex = 0;
                matrixInterval = setInterval(() => {
                    showTerminalMessage(terminalMessages[messageIndex]);
                    messageIndex = (messageIndex + 1) % terminalMessages.length;
                }, 3000);
                
                // Show ACCESS GRANTED message
                setTimeout(() => {
                    showAccessGranted();
                }, 2000);
            }
            // BARBIE MODE
            else if (inputValue === 'barbie') {
                body.classList.add('barbie-mode');
                body.classList.remove('dark-mode');
                
                // Create barbie cursor
                barbieCursor = document.createElement('div');
                barbieCursor.className = 'barbie-cursor';
                document.body.appendChild(barbieCursor);
                
                // Play barbie music
                const barbieMusic = document.getElementById('barbie-music');
                if (barbieMusic) {
                    barbieMusic.play().catch(e => console.log("Autoplay prevented:", e));
                }
                
                // Add crown to name cards
                document.querySelectorAll('.name-card').forEach(card => {
                    const crown = document.createElement('div');
                    crown.className = 'barbie-crown';
                    card.appendChild(crown);
                });
                
                // Create floating hearts
                barbieHeartInterval = setInterval(() => {
                    createBarbieHeart();
                }, 1000);
                
                // Create floating diamonds
                barbieDiamondInterval = setInterval(() => {
                    createBarbieDiamond();
                }, 2000);
                
                // Create floating kisses
                barbieKissInterval = setInterval(() => {
                    createBarbieKiss();
                }, 5000);
                
                // Create floating brushes
                barbieBrushInterval = setInterval(() => {
                    createBarbieBrush();
                }, 8000);
                
                // Show random barbie text
                barbieTextInterval = setInterval(() => {
                    showBarbieText();
                }, 10000);
                
                // Play voice clips occasionally
                barbieVoiceInterval = setInterval(() => {
                    playBarbieVoice();
                }, 15000);
                
                // Add click event for heart explosion
                document.addEventListener('click', createHeartExplosion);
                
                // Add scroll event for extra glitter
                document.addEventListener('scroll', createScrollGlitter);
                
                // Add right-click event for background pattern change
                document.addEventListener('contextmenu', changeBarbieBackground);
            }
            // GTA MODE
            else if (inputValue === 'gta') {
                body.classList.add('gta-mode');
                body.classList.remove('dark-mode');
                
                // Create gta cursor
                gtaCursor = document.createElement('div');
                gtaCursor.className = 'gta-cursor';
                document.body.appendChild(gtaCursor);
                
                // Play gta music
                const gtaMusic = document.getElementById('gta-music');
                if (gtaMusic) {
                    gtaMusic.play().catch(e => console.log("Autoplay prevented:", e));
                }
                
                // Play radio static
                const radioSound = document.getElementById('radio-sound');
                if (radioSound) {
                    radioSound.play().catch(e => console.log("Sound play prevented:", e));
                }
                
                // Create floating stars
                gtaStarInterval = setInterval(() => {
                    createGTAStar();
                }, 1500);
                
                // Create floating money
                gtaMoneyInterval = setInterval(() => {
                    createGTAMoney();
                }, 2000);
                
                // Create floating weapons
                gtaWeaponInterval = setInterval(() => {
                    createGTAWeapon();
                }, 5000);
                
                // Show random gta text
                gtaTextInterval = setInterval(() => {
                    showGTAText();
                }, 8000);
                
                // Add click event for shooting
                document.addEventListener('click', createGunshot);
                
                // Add right-click event for explosion
                document.addEventListener('contextmenu', createExplosion);
                
                // Add keyboard events for wanted level
                document.addEventListener('keydown', handleGTAKeys);
                
                // Initialize health and armor bars
                updateGTAHUD();
                
                // Create radar blips
                createRadarBlips();
            }
        });
        
        // GTA MODE FUNCTIONS
        function createGTACursor() {
            document.addEventListener('mousemove', function(e) {
                if (!gtaCursor) return;
                
                // Update cursor position
                gtaCursor.style.left = e.clientX + 'px';
                gtaCursor.style.top = e.clientY + 'px';
                
                // Create trail
                createGTATrail(e.clientX, e.clientY);
            });
            
            // Add recoil effect on click
            document.addEventListener('click', function() {
                if (!gtaCursor) return;
                
                anime({
                    targets: gtaCursor,
                    scale: [1, 1.2, 1],
                    duration: 200,
                    easing: 'easeOutElastic'
                });
            });
        }
        
        function createGTATrail(x, y) {
            // Create trail element
            const trail = document.createElement('div');
            trail.className = 'gta-cursor-trail';
            trail.style.left = x + 'px';
            trail.style.top = y + 'px';
            document.body.appendChild(trail);
            
            // Add to trails array
            gtaTrails.push(trail);
            
            // Remove trail after animation
            setTimeout(() => {
                trail.remove();
                gtaTrails = gtaTrails.filter(t => t !== trail);
            }, 1000);
        }
        
        function createGTAStar() {
            const star = document.createElement('div');
            star.className = 'gta-star';
            star.style.left = Math.random() * window.innerWidth + 'px';
            document.body.appendChild(star);
            
            // Remove after animation
            setTimeout(() => {
                star.remove();
            }, 8000);
        }
        
        function createGTAMoney() {
            const money = document.createElement('div');
            money.className = 'gta-money';
            money.style.left = Math.random() * window.innerWidth + 'px';
            document.body.appendChild(money);
            
            // Remove after animation
            setTimeout(() => {
                money.remove();
            }, 10000);
        }
        
        function createGTAWeapon() {
            const weapon = document.createElement('div');
            weapon.className = 'gta-weapon';
            weapon.style.top = Math.random() * window.innerHeight + 'px';
            document.body.appendChild(weapon);
            
            // Remove after animation
            setTimeout(() => {
                weapon.remove();
            }, 12000);
        }
        
        function showGTAText() {
            const texts = ["Wasted!", "Busted!", "Mission Passed!", "Respect +", "Grove Street 4 Life!"];
            const text = texts[Math.floor(Math.random() * texts.length)];
            
            const textElement = document.createElement('div');
            textElement.className = 'gta-text';
            textElement.textContent = text;
            textElement.style.left = Math.random() * (window.innerWidth - 200) + 'px';
            textElement.style.top = Math.random() * (window.innerHeight - 100) + 'px';
            document.body.appendChild(textElement);
            
            // Animate in
            anime({
                targets: textElement,
                opacity: [0, 1],
                scale: [0, 1],
                duration: 1000,
                easing: 'easeOutElastic'
            });
            
            // Animate out
            setTimeout(() => {
                anime({
                    targets: textElement,
                    opacity: 0,
                    scale: 0,
                    duration: 1000,
                    easing: 'easeInQuad',
                    complete: function() {
                        textElement.remove();
                    }
                });
            }, 3000);
        }
        
        function createGunshot(e) {
            if (!body.classList.contains('gta-mode')) return;
            
            // Create bullet hole
            const bulletHole = document.createElement('div');
            bulletHole.className = 'bullet-hole';
            bulletHole.style.left = e.clientX + 'px';
            bulletHole.style.top = e.clientY + 'px';
            document.body.appendChild(bulletHole);
            
            // Play gunshot sound
            const gunshotSound = document.getElementById('gunshot-sound');
            if (gunshotSound) {
                gunshotSound.currentTime = 0;
                gunshotSound.play().catch(e => console.log("Sound play prevented:", e));
            }
            
            // Increase wanted level randomly
            if (Math.random() > 0.7) {
                increaseWantedLevel();
            }
            
            // Remove bullet hole after animation
            setTimeout(() => {
                bulletHole.remove();
            }, 3000);
        }
        
        function createExplosion(e) {
            if (!body.classList.contains('gta-mode')) return;
            
            e.preventDefault();
            
            // Create explosion
            const explosion = document.createElement('div');
            explosion.className = 'gta-explosion';
            explosion.style.left = e.clientX + 'px';
            explosion.style.top = e.clientY + 'px';
            document.body.appendChild(explosion);
            
            // Animate explosion
            anime({
                targets: explosion,
                opacity: [0, 1, 0],
                scale: [0, 2, 0],
                duration: 1000,
                easing: 'easeOutQuad',
                complete: function() {
                    explosion.remove();
                }
            });
            
            // Play explosion sound
            const explosionSound = document.getElementById('explosion-sound');
            if (explosionSound) {
                explosionSound.currentTime = 0;
                explosionSound.play().catch(e => console.log("Sound play prevented:", e));
            }
            
            // Increase wanted level
            increaseWantedLevel();
            
            // Decrease health
            decreaseHealth(20);
        }
        
        function increaseWantedLevel() {
            if (gtaWantedLevel < 5) {
                gtaWantedLevel++;
                updateWantedStars();
                
                // Play siren sound at higher wanted levels
                if (gtaWantedLevel >= 3) {
                    const sirenSound = document.getElementById('siren-sound');
                    if (sirenSound) {
                        sirenSound.play().catch(e => console.log("Sound play prevented:", e));
                    }
                }
                
                // Add police siren effect at max wanted level
                if (gtaWantedLevel === 5) {
                    body.classList.add('wanted-5');
                }
            }
        }
        
        function decreaseWantedLevel() {
            if (gtaWantedLevel > 0) {
                gtaWantedLevel--;
                updateWantedStars();
                
                // Remove police siren effect
                if (gtaWantedLevel < 5) {
                    body.classList.remove('wanted-5');
                }
            }
        }
        
        function updateWantedStars() {
            const stars = document.querySelectorAll('.wanted-star');
            stars.forEach((star, index) => {
                if (index < gtaWantedLevel) {
                    star.classList.add('active');
                } else {
                    star.classList.remove('active');
                }
            });
        }
        
        function decreaseHealth(amount) {
            gtaHealth = Math.max(0, gtaHealth - amount);
            updateGTAHUD();
            
            if (gtaHealth === 0) {
                showGTAText("Wasted!");
                // Reset health after delay
                setTimeout(() => {
                    gtaHealth = 100;
                    updateGTAHUD();
                }, 3000);
            }
        }
        
        function decreaseArmor(amount) {
            gtaArmor = Math.max(0, gtaArmor - amount);
            updateGTAHUD();
        }
        
        function updateGTAHUD() {
            const healthBar = document.getElementById('healthBar');
            const armorBar = document.getElementById('armorBar');
            
            if (healthBar) healthBar.style.width = gtaHealth + '%';
            if (armorBar) armorBar.style.width = gtaArmor + '%';
        }
        
        function handleGTAKeys(e) {
            if (!body.classList.contains('gta-mode')) return;
            
            switch(e.key) {
                case '1':
                    increaseWantedLevel();
                    break;
                case '2':
                    decreaseWantedLevel();
                    break;
                case 'h':
                    gtaHealth = Math.min(100, gtaHealth + 25);
                    updateGTAHUD();
                    break;
                case 'a':
                    gtaArmor = Math.min(100, gtaArmor + 25);
                    updateGTAHUD();
                    break;
            }
        }
        
        function createRadarBlips() {
            const radar = document.querySelector('.gta-radar');
            if (!radar) return;
            
            // Clear existing blips
            gtaRadarBlips.forEach(blip => blip.remove());
            gtaRadarBlips = [];
            
            // Create new blips
            for (let i = 0; i < 5; i++) {
                const blip = document.createElement('div');
                blip.className = 'radar-blip';
                
                // Random position within radar
                const angle = Math.random() * Math.PI * 2;
                const distance = 20 + Math.random() * 40;
                const x = 75 + Math.cos(angle) * distance;
                const y = 75 + Math.sin(angle) * distance;
                
                blip.style.left = x + 'px';
                blip.style.top = y + 'px';
                
                radar.appendChild(blip);
                gtaRadarBlips.push(blip);
            }
        }
        
        // Initialize gta cursor when gta mode is activated
        secretCodeInput.addEventListener('input', function() {
            if (this.value.toLowerCase().trim() === 'gta') {
                setTimeout(createGTACursor, 100);
            }
        });
        
        // BARBIE MODE FUNCTIONS
        function createBarbieCursor() {
            document.addEventListener('mousemove', function(e) {
                if (!barbieCursor) return;
                
                // Update cursor position
                barbieCursor.style.left = e.clientX + 'px';
                barbieCursor.style.top = e.clientY + 'px';
                
                // Rotate cursor based on movement
                const rotation = Math.atan2(e.movementY, e.movementX) * 180 / Math.PI;
                barbieCursor.style.transform = `translate(-50%, -50%) rotate(${rotation}deg)`;
                
                // Create glitter trail
                createGlitterTrail(e.clientX, e.clientY);
            });
            
            // Add bounce effect on click
            document.addEventListener('click', function() {
                if (!barbieCursor) return;
                
                anime({
                    targets: barbieCursor,
                    scale: [1, 1.5, 1],
                    duration: 300,
                    easing: 'easeOutElastic'
                });
                
                // Play sparkle sound
                const sparkleSound = document.getElementById('sparkle-sound');
                if (sparkleSound) {
                    sparkleSound.currentTime = 0;
                    sparkleSound.play().catch(e => console.log("Sound play prevented:", e));
                }
            });
        }
        
        function createGlitterTrail(x, y) {
            // Create trail element
            const trail = document.createElement('div');
            trail.className = 'barbie-cursor-trail';
            trail.style.left = x + 'px';
            trail.style.top = y + 'px';
            document.body.appendChild(trail);
            
            // Add to trails array
            barbieTrails.push(trail);
            
            // Remove trail after animation
            setTimeout(() => {
                trail.remove();
                barbieTrails = barbieTrails.filter(t => t !== trail);
            }, 1000);
            
            // Create sparkles occasionally
            if (Math.random() > 0.7) {
                createSparkle(x, y);
            }
        }
        
        function createSparkle(x, y) {
            const sparkle = document.createElement('div');
            sparkle.className = 'sparkle';
            sparkle.style.left = x + 'px';
            sparkle.style.top = y + 'px';
            document.body.appendChild(sparkle);
            
            // Remove after animation
            setTimeout(() => {
                sparkle.remove();
            }, 1000);
        }
        
        function createBarbieHeart() {
            const heart = document.createElement('div');
            heart.className = 'barbie-heart';
            heart.style.left = Math.random() * window.innerWidth + 'px';
            document.body.appendChild(heart);
            
            // Remove after animation
            setTimeout(() => {
                heart.remove();
            }, 8000);
        }
        
        function createBarbieDiamond() {
            const diamond = document.createElement('div');
            diamond.className = 'barbie-diamond';
            diamond.style.left = Math.random() * window.innerWidth + 'px';
            document.body.appendChild(diamond);
            
            // Remove after animation
            setTimeout(() => {
                diamond.remove();
            }, 10000);
        }
        
        function createBarbieKiss() {
            const kiss = document.createElement('div');
            kiss.className = 'barbie-kiss';
            kiss.style.left = Math.random() * window.innerWidth + 'px';
            kiss.style.top = Math.random() * window.innerHeight + 'px';
            document.body.appendChild(kiss);
            
            // Remove after animation
            setTimeout(() => {
                kiss.remove();
            }, 5000);
        }
        
        function createBarbieBrush() {
            const brush = document.createElement('div');
            brush.className = 'barbie-brush';
            brush.style.top = Math.random() * window.innerHeight + 'px';
            document.body.appendChild(brush);
            
            // Remove after animation
            setTimeout(() => {
                brush.remove();
            }, 15000);
        }
        
        function showBarbieText() {
            const texts = ["Hi Barbie!", "You're fabulous!", "So glamorous!", "Dream big!", "Sparkle on!"];
            const text = texts[Math.floor(Math.random() * texts.length)];
            
            const textElement = document.createElement('div');
            textElement.className = 'barbie-text';
            textElement.textContent = text;
            textElement.style.left = Math.random() * (window.innerWidth - 200) + 'px';
            textElement.style.top = Math.random() * (window.innerHeight - 100) + 'px';
            document.body.appendChild(textElement);
            
            // Animate in
            anime({
                targets: textElement,
                opacity: [0, 1],
                scale: [0, 1],
                duration: 1000,
                easing: 'easeOutElastic'
            });
            
            // Animate out
            setTimeout(() => {
                anime({
                    targets: textElement,
                    opacity: 0,
                    scale: 0,
                    duration: 1000,
                    easing: 'easeInQuad',
                    complete: function() {
                        textElement.remove();
                    }
                });
            }, 3000);
        }
        
        function playBarbieVoice() {
            const beautifulSound = document.getElementById('beautiful-sound');
            if (beautifulSound && Math.random() > 0.5) {
                beautifulSound.currentTime = 0;
                beautifulSound.play().catch(e => console.log("Sound play prevented:", e));
            }
        }
        
        function createHeartExplosion(e) {
            if (!body.classList.contains('barbie-mode')) return;
            
            for (let i = 0; i < 20; i++) {
                const heart = document.createElement('div');
                heart.className = 'barbie-heart';
                heart.style.left = e.clientX + 'px';
                heart.style.top = e.clientY + 'px';
                heart.style.animation = `heartExplode 1s ease-out forwards`;
                document.body.appendChild(heart);
                
                // Random direction and distance
                const angle = Math.random() * Math.PI * 2;
                const distance = 50 + Math.random() * 100;
                const targetX = e.clientX + Math.cos(angle) * distance;
                const targetY = e.clientY + Math.sin(angle) * distance;
                
                // Animate
                anime({
                    targets: heart,
                    left: targetX,
                    top: targetY,
                    opacity: [1, 0],
                    scale: [0, 1, 0],
                    duration: 1000,
                    easing: 'easeOutQuad',
                    complete: function() {
                        heart.remove();
                    }
                });
            }
            
            // Play giggle sound
            const giggleSound = document.getElementById('giggle-sound');
            if (giggleSound) {
                giggleSound.currentTime = 0;
                giggleSound.play().catch(e => console.log("Sound play prevented:", e));
            }
        }
        
        function createScrollGlitter() {
            if (!body.classList.contains('barbie-mode')) return;
            
            for (let i = 0; i < 5; i++) {
                createSparkle(
                    Math.random() * window.innerWidth,
                    Math.random() * window.innerHeight
                );
            }
        }
        
        function changeBarbieBackground(e) {
            if (!body.classList.contains('barbie-mode')) return;
            
            e.preventDefault();
            
            const patterns = [
                'polka-dots',
                'stripes',
                'hearts',
                'stars'
            ];
            
            const pattern = patterns[Math.floor(Math.random() * patterns.length)];
            const glitter = document.querySelector('.barbie-glitter');
            
            // Change background pattern
            switch(pattern) {
                case 'polka-dots':
                    glitter.style.backgroundImage = 
                        'radial-gradient(circle at 20% 30%, rgba(255, 255, 255, 0.3) 3px, transparent 4px), ' +
                        'radial-gradient(circle at 80% 70%, rgba(255, 255, 255, 0.3) 3px, transparent 4px)';
                    glitter.style.backgroundSize = '50px 50px, 70px 70px';
                    break;
                case 'stripes':
                    glitter.style.backgroundImage = 
                        'repeating-linear-gradient(45deg, transparent, transparent 10px, rgba(255, 255, 255, 0.2) 10px, rgba(255, 255, 255, 0.2) 20px)';
                    break;
                case 'hearts':
                    glitter.style.backgroundImage = 
                        'url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\' width=\'50\' height=\'50\' viewBox=\'0 0 50 50\'><path d=\'M25,15 C30,5 40,5 45,15 C50,25 25,40 25,40 C25,40 0,25 5,15 C10,5 20,5 25,15 Z\' fill=\'white\' opacity=\'0.2\'/></svg>")';
                    break;
                case 'stars':
                    glitter.style.backgroundImage = 
                        'url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\' width=\'50\' height=\'50\' viewBox=\'0 0 50 50\'><polygon points=\'25,5 30,20 45,20 32.5,30 37.5,45 25,35 12.5,45 17.5,30 5,20 20,20\' fill=\'white\' opacity=\'0.2\'/></svg>")';
                    break;
            }
            
            // Play sparkle sound
            const sparkleSound = document.getElementById('sparkle-sound');
            if (sparkleSound) {
                sparkleSound.currentTime = 0;
                sparkleSound.play().catch(e => console.log("Sound play prevented:", e));
            }
        }
        
        // Initialize barbie cursor when barbie mode is activated
        secretCodeInput.addEventListener('input', function() {
            if (this.value.toLowerCase().trim() === 'barbie') {
                setTimeout(createBarbieCursor, 100);
            }
        });
        
        // GLITCH MODE FUNCTIONS
        function createErrorMessage() {
            const error = document.createElement('div');
            error.className = 'error-message';
            error.textContent = errorMessages[Math.floor(Math.random() * errorMessages.length)];
            
            // Random position
            const x = Math.random() * (window.innerWidth - 200);
            const y = Math.random() * (window.innerHeight - 50);
            error.style.left = `${x}px`;
            error.style.top = `${y}px`;
            
            document.body.appendChild(error);
            
            // Animate in
            anime({
                targets: error,
                opacity: [0, 1],
                scale: [0, 1],
                duration: 500,
                easing: 'easeOutBack'
            });
            
            // Remove after animation
            setTimeout(() => {
                anime({
                    targets: error,
                    opacity: 0,
                    scale: 0,
                    duration: 500,
                    easing: 'easeInBack',
                    complete: function() {
                        document.body.removeChild(error);
                    }
                });
            }, 2000);
        }
        
        function scrambleText() {
            const elements = document.querySelectorAll('h1, h2, h3, p, a, span');
            elements.forEach(element => {
                if (Math.random() > 0.7) { // Only scramble some elements
                    const originalText = element.textContent;
                    let scrambled = '';
                    
                    for (let i = 0; i < originalText.length; i++) {
                        if (Math.random() > 0.3) {
                            scrambled += String.fromCharCode(33 + Math.floor(Math.random() * 94));
                        } else {
                            scrambled += originalText[i];
                        }
                    }
                    
                    element.textContent = scrambled;
                    
                    // Return to original after a delay
                    setTimeout(() => {
                        element.textContent = originalText;
                    }, 200);
                }
            });
        }
        
        // MATRIX MODE FUNCTIONS
        function showTerminalMessage(message) {
            const terminal = document.querySelector('.terminal-message');
            terminal.textContent = message;
            
            anime({
                targets: terminal,
                opacity: [0, 1],
                translateY: [20, 0],
                duration: 500,
                easing: 'easeOutQuad'
            });
            
            setTimeout(() => {
                anime({
                    targets: terminal,
                    opacity: 0,
                    translateY: 20,
                    duration: 500,
                    easing: 'easeInQuad'
                });
            }, 2500);
        }
        
        function showAccessGranted() {
            const access = document.querySelector('.access-granted');
            
            anime({
                targets: access,
                opacity: [0, 1],
                scale: [0.5, 1.2, 1],
                duration: 1000,
                easing: 'easeOutElastic'
            });
            
            setTimeout(() => {
                anime({
                    targets: access,
                    opacity: 0,
                    duration: 1000,
                    easing: 'easeInQuad'
                });
            }, 3000);
        }
        
        // Names array with descriptions
        const names = [
            { name: "Ali", description: "<i class=\"fa-solid fa-robot\"></i> Ali is a real powerful AI we call him (AliGpt)" },
            { name: "Farhad", description: "<i class=\"fa-solid fa-palette\"></i> He loves Basketball" },
            { name: "Yusif", description: "<i class=\"fa-solid fa-music\"></i> DJ :) (host of website)" },
            { name: "Rufiz", description: "<i class=\"fa-solid fa-basketball\"></i> American bad boy that loves sport (Logo Creator)" },
            { name: "Eldar", description: "<i class=\"fa-solid fa-crosshairs\"></i> He is good for his hunting skills" },
            { name: "Ismayil", description: "<i class=\"fa-solid fa-gamepad\"></i> Ismayil is best Roblox player (Steal a brainrot)" },
            { name: "Kenan", description: "<i class=\"fa-solid fa-basketball\"></i> he is the best basketball player (host)" },
            { name: "Zahra", description: "<i class=\"fa-solid fa-shield-halved\"></i> She is famous for protecting their bestie with MMA" },
            { name: "Aliya", description: "<i class=\"fa-solid fa-cart-shopping\"></i> Volleyball bestie" },
            { name: "Safia", description: "<i class=\"fa-solid fa-volleyball\"></i> Volleyball Player" },
            { name: "Khadija", description: "<i class=\"fa-solid fa-people-group\"></i> Team bestie MMA" },
            { name: "Aisha", description: "<i class=\"fa-solid fa-microphone\"></i> Blackpink" },
            { name: "Fateh", description: "<i class=\"fa-solid fa-face-laugh\"></i> Ver Mən Vurmuda Nolar Gol Olacag" },
            { name: "Matin", description: "<i class=\"fa-solid fa-calculator\"></i> Our math calculator" },
            { name: "Vidadi", description: "<i class=\"fa-solid fa-gamepad\"></i> Video games" },
            { name: "Omar", description: "<i class=\"fa-solid fa-football\"></i> Rugby" },
            { name: "Ayla", description: "<i class=\"fa-solid fa-heart\"></i> MMA Bestie " },
            { name: "Farahnaz", description: "<i class=\"fa-solid fa-crown\"></i> Kind and once was class leader" },
            { name: "Maryam", description: "<i class=\"fa-solid fa-volume-xmark\"></i> So silent 🤫" },
            { name: "Inji", description: "<i class=\"fa-solid fa-tv\"></i>loves anime" },
            { name: "Zuleykha", description: "<i class=\"fa-solid fa-music\"></i> She likes Playing Piano" }
        ];
        
        // Colors for cards
        const cardColors = [
            "from-pink-500 to-purple-500", "from-blue-500 to-cyan-500", "from-green-500 to-teal-500",
            "from-yellow-500 to-orange-500", "from-red-500 to-pink-500", "from-indigo-500 to-purple-500",
            "from-teal-500 to-blue-500", "from-purple-500 to-pink-500", "from-cyan-500 to-blue-500",
            "from-orange-500 to-red-500", "from-green-500 to-cyan-500", "from-pink-500 to-rose-500",
            "from-blue-500 to-indigo-500", "from-amber-500 to-yellow-500", "from-emerald-500 to-teal-500",
            "from-violet-500 to-purple-500", "from-rose-500 to-pink-500", "from-cyan-500 to-sky-500",
            "from-fuchsia-500 to-pink-500", "from-lime-500 to-green-500", "from-purple-500 to-indigo-500"
        ];
        
        // Icons for cards
        const icons = [
            "cpu", "coffee", "music", "gift", "sun", "moon", "cloud", "shield", "bell", "bell", 
            "camera", "video", "slash", "feather", "video-off", "key", "smile", "smile", "paperclip", 
            "camera", "music"
        ];
        
        // Generate name cards
        const gridContainer = document.querySelector('.grid');
        
        names.forEach((nameObj, index) => {
            const card = document.createElement('div');
            const gradientClass = cardColors[index];
            card.className = `name-card bg-gradient-to-br ${gradientClass} rounded-3xl p-6 md:p-10 text-white shadow-2xl transform transition-all duration-500 hover:shadow-2xl relative overflow-hidden h-full`;
            card.setAttribute('data-aos', 'fade-up');
            card.setAttribute('data-aos-delay', `${index * 50}`);
            
            card.innerHTML = `
                <div class="flex justify-center mb-4 md:mb-6">
                    <div class="bg-white/20 p-4 md:p-5 rounded-full">
                        <i data-feather="${icons[index]}" class="w-8 h-8 md:w-12 md:h-12"></i>
                    </div>
                </div>
                <h2 class="name-title text-2xl md:text-4xl font-bold mb-3 md:mb-5 text-center gradient-text">${nameObj.name}</h2>
                <p class="text-center text-white/90 text-base md:text-lg mb-4 md:mb-5">${nameObj.description}</p>
            `;
            
            gridContainer.appendChild(card);
        });
        
        // Reinitialize Feather Icons after adding elements
        feather.replace();
        
        // Dark mode toggle functionality - RESTORED EXACTLY AS IT WAS
        const darkModeToggle = document.getElementById('darkModeToggle');
        const toggleIcon = darkModeToggle.querySelector('i');
        
        // Check for saved theme preference
        const currentTheme = localStorage.getItem('theme');
        
        if (currentTheme === 'dark') {
            document.body.classList.add('dark-mode');
            toggleIcon.classList.remove('fa-moon');
            toggleIcon.classList.add('fa-sun');
        }
        
        darkModeToggle.addEventListener('click', () => {
            document.body.classList.toggle('dark-mode');
            
            // Update icon
            if (document.body.classList.contains('dark-mode')) {
                toggleIcon.classList.remove('fa-moon');
                toggleIcon.classList.add('fa-sun');
                localStorage.setItem('theme', 'dark');
            } else {
                toggleIcon.classList.remove('fa-sun');
                toggleIcon.classList.add('fa-moon');
                localStorage.setItem('theme', 'light');
            }
        });
        
        // Music toggle functionality
        const musicToggle = document.getElementById('musicToggle');
        const musicIcon = musicToggle.querySelector('i');
        const backgroundMusic = document.getElementById('background-music');
        
        // Check for saved music preference
        const musicPreference = localStorage.getItem('music');
        
        if (musicPreference === 'playing') {
            backgroundMusic.play();
            musicIcon.classList.remove('fa-volume-mute');
            musicIcon.classList.add('fa-volume-up');
        } else {
            backgroundMusic.pause();
            musicIcon.classList.remove('fa-volume-up');
            musicIcon.classList.add('fa-volume-mute');
        }
        
        musicToggle.addEventListener('click', () => {
            if (backgroundMusic.paused) {
                backgroundMusic.play();
                musicIcon.classList.remove('fa-volume-mute');
                musicIcon.classList.add('fa-volume-up');
                localStorage.setItem('music', 'playing');
            } else {
                backgroundMusic.pause();
                musicIcon.classList.remove('fa-volume-up');
                musicIcon.classList.add('fa-volume-mute');
                localStorage.setItem('music', 'paused');
            }
        });
        
        // Create background stars
        function createStars() {
            const container = document.getElementById('stars-container');
            const starCount = 100;
            
            for (let i = 0; i < starCount; i++) {
                const star = document.createElement('div');
                star.classList.add('star');
                
                // Random properties
                const size = Math.random() * 3;
                const posX = Math.random() * 100;
                const posY = Math.random() * 100;
                const duration = 2 + Math.random() * 5;
                const delay = Math.random() * 5;
                
                star.style.width = `${size}px`;
                star.style.height = `${size}px`;
                star.style.left = `${posX}%`;
                star.style.top = `${posY}%`;
                star.style.setProperty('--duration', `${duration}s`);
                star.style.animationDelay = `${delay}s`;
                
                container.appendChild(star);
            }
        }
        
        // Initialize on load
        document.addEventListener('DOMContentLoaded', function() {
            createStars();
            
            // Make iframe responsive
            const iframe = document.querySelector('iframe');
            if (iframe) {
                iframe.style.maxWidth = '100%';
                iframe.style.height = 'auto';
                iframe.style.aspectRatio = '807 / 500';
            }
            
            // Add hover animations to name cards
            const nameCards = document.querySelectorAll('.name-card');
            nameCards.forEach(card => {
                card.addEventListener('mouseenter', function() {
                    anime({
                        targets: this,
                        scale: 1.05,
                        rotateY: '5deg',
                        duration: 600,
                        easing: 'easeOutElastic'
                    });
                });
                
                card.addEventListener('mouseleave', function() {
                    anime({
                        targets: this,
                        scale: 1,
                        rotateY: '0deg',
                        duration: 600,
                        easing: 'easeOutElastic'
                    });
                });
            });
            
            // Animate header text
            anime({
                targets: '.name-title',
                translateY: [-70, 0],
                opacity: [0, 1],
                duration: 2500,
                easing: 'easeOutExpo'
            });
        });
    </script>
</body>
</html>
